{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"get_",
				"get_variable_shape\tfunction"
			],
			[
				"st",
				"std\tfunction"
			],
			[
				"lam",
				"Lambda\tclass"
			],
			[
				"augment_im",
				"augment_images\tfunction"
			],
			[
				"Cropp",
				"Cropping2D\tclass"
			],
			[
				"flip",
				"fliplr\tfunction"
			],
			[
				"validation",
				"validation_steps\tparam"
			],
			[
				"train",
				"train_test_split\timport"
			],
			[
				"prep",
				"preprocess_input"
			],
			[
				"file",
				"file_path"
			],
			[
				"DEFINE",
				"DEFINE_integer\tfunction"
			],
			[
				"MaxP",
				"MaxPool2D\tstatement"
			],
			[
				"local_var",
				"local_variables_initializer"
			],
			[
				"local_va",
				"local_variables_initializer\tfunction"
			],
			[
				"so",
				"sparse_softmax_cross_entropy\tfunction"
			],
			[
				"lengths",
				"lengths\tparam"
			],
			[
				"get",
				"get_all_Xlengths\tfunction"
			],
			[
				"wo",
				"this_word\tstatement"
			],
			[
				"mxnet",
				"mxnet_seq2seq_speed"
			],
			[
				"R",
				"resnet50\tmodule"
			],
			[
				"RE",
				"ResNet-L50.meta"
			],
			[
				"ResNet",
				"ResNet-L50.meta"
			],
			[
				"import",
				"import_meta_graph\tfunction"
			],
			[
				"ze",
				"ZeroPadding2D\tclass"
			],
			[
				"validat",
				"validation_monitors"
			],
			[
				"assert",
				"assert_almost_equal\tfunction"
			],
			[
				"gradient",
				"gradient_placeholder"
			],
			[
				"initi",
				"initializer"
			],
			[
				"globa",
				"global_network\tstatement"
			],
			[
				"graid",
				"gradients_op"
			],
			[
				"DE",
				"DEFINE_integer\tfunction"
			],
			[
				"get_df",
				"get_default_session\tfunction"
			],
			[
				"Tra",
				"TRAINABLE_VARIABLES\tstatement"
			],
			[
				"TRAIN",
				"TRAINABLE_VARIABLES\tstatement"
			],
			[
				"INPUT",
				"input_shape"
			],
			[
				"re",
				"gym-results/"
			],
			[
				"wrap",
				"wrappers\tmodule"
			],
			[
				"CHECK",
				"CHECKPOINT_INTERVAL"
			],
			[
				"prob",
				"probs_summary_t\tstatement"
			],
			[
				"RESI",
				"RESIZE_W"
			],
			[
				"eps",
				"_str_epsneg\tstatement"
			],
			[
				"pol",
				"policy\tstatement"
			],
			[
				"s",
				"state\tstatement"
			],
			[
				"copy",
				"copy_global_op"
			],
			[
				"input",
				"input_shape"
			],
			[
				"summ",
				"summarize\t(A3C.py)"
			],
			[
				"squ",
				"squeeze\tfunction"
			],
			[
				"Averag",
				"AveragePooling2D"
			],
			[
				"VGG",
				"VGGNet5\t(vgg5.py)"
			],
			[
				"load",
				"load_mnist\tfunction"
			],
			[
				"_",
				"_\tstatement"
			],
			[
				"Incep",
				"InceptionV3"
			],
			[
				"INc",
				"InceptionV3"
			],
			[
				"Incet",
				"InceptionV3"
			],
			[
				"ince",
				"inception\tfunction"
			],
			[
				"global",
				"GlobalAveragePooling2D\tclass"
			],
			[
				"incept",
				"inception_module"
			],
			[
				"VG",
				"VGGNet\tclass"
			],
			[
				"Globa",
				"GlobalAveragePooling2D\tclass"
			],
			[
				"add",
				"add_argument"
			],
			[
				"arg",
				"argparse\tfunction"
			],
			[
				"RESNET",
				"ResNet50"
			],
			[
				"Res",
				"ResNet"
			],
			[
				"sav",
				"save_weights\tfunction"
			],
			[
				"val",
				"validation_data\tparam"
			],
			[
				"GlobalAverage",
				"GlobalAveragePooling2D\tclass"
			],
			[
				"Global",
				"GlobalAveragePooling2D\tclass"
			],
			[
				"merge",
				"merge_all\tfunction"
			],
			[
				"value",
				"_value_loss\tstatement"
			],
			[
				"poliyc",
				"policy_loss\tstatement"
			],
			[
				"acti",
				"activation\tparam"
			],
			[
				"relu",
				"relu\tfunction"
			],
			[
				"variable",
				"variable_summaries\tfunction"
			],
			[
				"advanga",
				"advantage_list"
			],
			[
				"advag",
				"advantage_list"
			],
			[
				"soft",
				"softmax\tfunction"
			],
			[
				"policy",
				"policy_network\tstatement"
			],
			[
				"compet",
				"competition_id"
			],
			[
				"k0",
				"k0-01-mnist/"
			],
			[
				"comptet",
				"competition_URL"
			],
			[
				"expan",
				"expand_dims\tfunction"
			],
			[
				"exp",
				"expand_dims"
			],
			[
				"next_",
				"next_state"
			],
			[
				"state",
				"state_array"
			],
			[
				"theta",
				"theta_mean"
			],
			[
				"mul",
				"multivariate_normal\tfunction"
			],
			[
				"Key",
				"KeyboardInterrupt\tclass"
			],
			[
				"rand",
				"random_sample\tfunction"
			],
			[
				"parse",
				"parse_args\tfunction"
			],
			[
				"Argu",
				"ArgumentParser\tclass"
			],
			[
				"read",
				"read_file\tfunction"
			],
			[
				"wra",
				"wrappers\tmodule"
			],
			[
				"wrapp",
				"Wrapper\tclass"
			],
			[
				"ac",
				"activation\tparam"
			],
			[
				"anne",
				"annealing_epsilon"
			],
			[
				"next_state",
				"next_state_array"
			],
			[
				"assertT",
				"assertTupleEqual\tfunction"
			],
			[
				"a",
				"assertEquals\tstatement"
			],
			[
				"test",
				"test_session\tfunction"
			],
			[
				"sess",
				"Session"
			],
			[
				"assert_r",
				"assert_no_warnings\tfunction"
			],
			[
				"discounted",
				"discounted_rewards"
			],
			[
				"discounte",
				"discounted_rewards"
			],
			[
				"REWARD_",
				"EPISODE_100_REWARD_LIST"
			],
			[
				"output",
				"output_size\tstatement"
			],
			[
				"discountr",
				"discount_rewards"
			],
			[
				"eq",
				"assert_almost_equal\tfunction"
			],
			[
				"get_def",
				"get_default_session\tfunction"
			],
			[
				"next_ob",
				"next_observation_list"
			],
			[
				"observation",
				"observation_list"
			],
			[
				"adam",
				"adam\tstatement"
			],
			[
				"op",
				"optimizers\tmodule"
			],
			[
				"observa",
				"observation_list"
			],
			[
				"obse",
				"observation_dim\tstatement"
			],
			[
				"new_obse",
				"new_observation_list\tstatement"
			],
			[
				"obser",
				"observation_space"
			],
			[
				"prepr",
				"preprocessed_obs"
			],
			[
				"fit",
				"fit_transform\tfunction"
			],
			[
				"f",
				"feature_extraction\tmodule"
			],
			[
				"senten",
				"sentences"
			],
			[
				"ba",
				"shuffle_batch\tfunction"
			],
			[
				"global_",
				"global_variables_initializer\tfunction"
			],
			[
				"spec",
				"sparse_softmax_cross_entropy_with_logits\tfunction"
			],
			[
				"softmax",
				"softmax_cross_entropy_with_logits\tfunction"
			],
			[
				"resh",
				"reshape\tfunction"
			],
			[
				"hi_",
				"h_size\tparam"
			],
			[
				"ren",
				"render\tparam"
			],
			[
				"Batch",
				"BATCH_SIZE"
			]
		]
	},
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					""
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Traditional"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"PdfLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"XeLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"LuaLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Basic Builder"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Basic Builder - PdfLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Basic Builder - XeLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Basic Builder - LuaLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Script Builder"
				]
			],
			[
				"Packages/LaTeXTools/LaTeX.sublime-build",
				"Traditional"
			]
		],
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": ":w",
		"selected_items":
		[
			[
				":w",
				":w - Save"
			],
			[
				"preview",
				"Markdown Preview: Preview in Browser"
			],
			[
				"autoformat",
				"Anaconda: Autoformat PEP8 Errors"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"autoforamt",
				"Anaconda: Autoformat PEP8 Errors"
			],
			[
				":wq",
				"Pretty JSON: JSON query with ./jq"
			],
			[
				"docst",
				"AutoDocstring: Current"
			],
			[
				"autofor",
				"Anaconda: Autoformat PEP8 Errors"
			],
			[
				"python",
				"Set Syntax: Python"
			],
			[
				"gitignore",
				"Gitignore: New gitignore"
			],
			[
				"gist",
				"Gist: Create Public Gist"
			],
			[
				"gist:",
				"Gist: Create Public Gist"
			],
			[
				"word",
				"Word Wrap: Toggle"
			],
			[
				"autofo",
				"Anaconda: Autoformat PEP8 Errors"
			],
			[
				"zeal",
				"Zeal: Search"
			],
			[
				"docstr",
				"AutoDocstring: Current"
			],
			[
				"scss",
				"Set Syntax: CSS"
			],
			[
				"autoform",
				"Anaconda: Autoformat PEP8 Errors"
			],
			[
				"test",
				"Anaconda: Run Current Test"
			],
			[
				"git status",
				"Git: Status"
			],
			[
				"autofora",
				"Anaconda: Autoformat PEP8 Errors"
			],
			[
				"autoforma",
				"Anaconda: Autoformat PEP8 Errors"
			],
			[
				":",
				":w - Save"
			],
			[
				"pretty",
				"Pretty JSON: JSON query with ./jq"
			],
			[
				"json",
				"Set Syntax: JSON"
			],
			[
				"worw",
				"Word Wrap: Toggle"
			],
			[
				"autoforat",
				"Anaconda: Autoformat PEP8 Errors"
			],
			[
				"term",
				"Terminal: Open"
			],
			[
				"status",
				"View: Toggle Status Bar"
			],
			[
				":python3",
				"Build With: Python3"
			],
			[
				":python",
				"Set Syntax: Python"
			],
			[
				":qa",
				"Set Syntax: SQL (Rails)"
			],
			[
				"terminal",
				"Terminal: Open"
			],
			[
				"autoforam",
				"Anaconda: Autoformat PEP8 Errors"
			],
			[
				"build wi",
				"Build With: LaTeX - Basic Builder"
			],
			[
				"Build With",
				"Build With: LaTeX - Basic Builder"
			],
			[
				"LatexBui",
				"Build With: LaTeX - Basic Builder"
			],
			[
				"markdwon",
				"Markdown Preview: Preview in Browser"
			],
			[
				"termin",
				"Terminal: Open"
			],
			[
				"sidebar",
				"View: Toggle Open Files in Side Bar"
			],
			[
				"build",
				"Build With: python3"
			],
			[
				"buidl",
				"Build With: python3"
			],
			[
				"settings",
				"Preferences: Settings"
			]
		],
		"width": 458.0
	},
	"console":
	{
		"height": 146.0,
		"history":
		[
			"ps",
			"cancel"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/home/kkweon/github/carnd/Project-Behavioral-Cloning/train.py",
		"/home/kkweon/.config/sublime-text-3/Packages/MarkdownEditing/Markdown.sublime-settings",
		"/home/kkweon/.config/sublime-text-3/Packages/User/Markdown.sublime-settings",
		"/home/kkweon/github/carnd/Project-Behavioral-Cloning/drive.py",
		"/home/kkweon/github/carnd/Project-Behavioral-Cloning/writeup.md",
		"/home/kkweon/github/carnd/Project-Behavioral-Cloning/video.py",
		"/home/kkweon/github/carnd/Project-Behavioral-Cloning/tests/test_train.py",
		"/home/kkweon/github/carnd/Project-Behavioral-Cloning/data/driving_log.csv",
		"/home/kkweon/github/carnd/Project-Behavioral-Cloning/delme.py",
		"/home/kkweon/github/carnd/Project-Behavioral-Cloning/tests/__init__.py",
		"/home/kkweon/github/carnd/Project-Behavioral-Cloning/__init__.py",
		"/home/kkweon/github/carnd/Project-Behavioral-Cloning/.gitignore",
		"/home/kkweon/github/carnd/Lab-TransferLearning/run.sh",
		"/home/kkweon/github/carnd/Lab-TransferLearning/run.result.txt",
		"/home/kkweon/github/carnd/Lab-TransferLearning/feature_extraction.py",
		"/home/kkweon/github/mnist-competition/evaluation.ipynb",
		"/home/kkweon/github/carnd/Lab-TransferLearning/download_cifar10.py",
		"/home/kkweon/github/carnd/Lab-AlexNet/train_feature_extraction.py",
		"/home/kkweon/github/carnd/Lab-AlexNet/traffic_sign_inference.py",
		"/home/kkweon/github/carnd/Lab-AlexNet/feature_extraction.py",
		"/home/kkweon/github/aind/P-Recognizer/my_model_selectors.py",
		"/home/kkweon/temp/tfkr.error.py",
		"/home/kkweon/github/aind/P-Recognizer/asl_data.py",
		"/home/kkweon/.config/sublime-text-3/Packages/AutoDocstring/AutoDocstring.sublime-settings",
		"/home/kkweon/.config/sublime-text-3/Packages/User/AutoDocstring.sublime-settings",
		"/home/kkweon/github/aind/P-Recognizer/asl_recognizer.ipynb",
		"/home/kkweon/temp/tfkr-test.py",
		"/home/kkweon/github/tflearn-practices/quickstart/main.py",
		"/home/kkweon/temp/keras-mxnet/mxnet_seq2seq_speed.py",
		"/home/kkweon/temp/keras-mxnet/keras_seq2seq_speed.py",
		"/home/kkweon/temp/keras-mxnet/result.txt",
		"/home/kkweon/temp/keras-mxnet/run_profiler.sh",
		"/home/kkweon/temp/rnn-test/main.py",
		"/home/kkweon/temp/reddit-crawl/get_reddits.py",
		"/home/kkweon/github/mnist-competition/evaluation.py",
		"/home/kkweon/github/mnist-competition/run_ensemble.py",
		"/home/kkweon/github/mnist-competition/utils.py",
		"/home/kkweon/github/mnist-competition/resnet.py",
		"/home/kkweon/github/mnist-competition/model.py",
		"/home/kkweon/.config/sublime-text-3/Packages/User/Anaconda.sublime-settings",
		"/home/kkweon/github/mnist-competition/resnet-new.py",
		"/home/kkweon/Downloads/tensorflow-resnet-pretrained-20160509/resnet",
		"/home/kkweon/github/mnist-competition/estimator.py",
		"/home/kkweon/temp/delme.py",
		"/home/kkweon/temp/im2col.py",
		"/home/kkweon/temp/mypy_test.py",
		"/home/kkweon/temp/mypy.test.py",
		"/home/kkweon/temp/v1.txt",
		"/home/kkweon/temp/v2.txt",
		"/home/kkweon/github/mnist-competition/delme.py",
		"/home/kkweon/github/rl-code/grid-world/value_iteration/agent.py",
		"/home/kkweon/github/ReinforcementZeroToAll/A3C/A3C.py",
		"/home/kkweon/temp/manual_tf.py",
		"/home/kkweon/github/ReinforcementZeroToAll/A3C/atari_environment.py",
		"/home/kkweon/github/ReinforcementZeroToAll/09_1_genetic_algorithm.py",
		"/home/kkweon/github/ReinforcementZeroToAll/10_1_Actor_Critic.ipynb",
		"/home/kkweon/github/ReinforcementZeroToAll/A3C/async-rl/a3c.py",
		"/home/kkweon/github/ReinforcementZeroToAll/A3C/async-rl/atari_environment.py",
		"/home/kkweon/github/ReinforcementZeroToAll/A3C/async-rl/a3c_model.py",
		"/home/kkweon/github/ReinforcementZeroToAll/A3C/__pycache__/worker.py",
		"/home/kkweon/github/ReinforcementZeroToAll/A3C/main.py",
		"/home/kkweon/github/mnist-competition/evaluation-kaggle.py",
		"/home/kkweon/github/mnist-competition/submission.csv",
		"/home/kkweon/github/mnist-competition/vgg16.py",
		"/home/kkweon/github/ReinforcementZeroToAll/10_1_A2C.py",
		"/home/kkweon/github/CS294/hw4/main.py",
		"/home/kkweon/github/CS294/hw1/run_expert.py",
		"/home/kkweon/github/CS294/hw1/run_",
		"/home/kkweon/github/ReinforcementZeroToAll/gym-results/openaigym.video.0.8854.video014000.meta.json",
		"/home/kkweon/github/KaggleZeroToAll/kaggle_submission.py",
		"/home/kkweon/github/KaggleZeroToAll/kaggle.ini",
		"/home/kkweon/github/KaggleZeroToAll/.gitignore",
		"/home/kkweon/github/KaggleZeroToAll/README.md",
		"/home/kkweon/github/KaggleZeroToAll/kaggle_download.py",
		"/home/kkweon/github/berkely-ai/reinforcement/.gitignore",
		"/home/kkweon/github/ReinforcementZeroToAll/07_4_dqn_pong.py",
		"/home/kkweon/github/ReinforcementZeroToAll/09_2_cross_entropy.py",
		"/home/kkweon/github/DeepLearningZeroToAll/lab-03-X-minimizing_cost_tf_gradient.py",
		"/home/kkweon/github/ReinforcementZeroToAll/gym.ini",
		"/home/kkweon/github/pytest-fixture-example/test_main.py",
		"/home/kkweon/github/ReinforcementZeroToAll/tests/test_DQN.py",
		"/home/kkweon/github/ReinforcementZeroToAll/dqn.py",
		"/home/kkweon/github/ReinforcementZeroToAll/README.md",
		"/home/kkweon/github/ReinforcementZeroToAll/tests/__init__.py",
		"/home/kkweon/github/DeepLearningZeroToAll/delme.py",
		"/home/kkweon/github/DeepLearningZeroToAll/.travis.yml",
		"/home/kkweon/github/ReinforcementZeroToAll/07_2_dqn_2013_cartpole.py",
		"/home/kkweon/github/rl-cartpole/dqn.py",
		"/home/kkweon/github/rl-cartpole/dqn.",
		"/home/kkweon/github/ReinforcementZeroToAll/07_3_dqn_2015_cartpole.py",
		"/home/kkweon/github/ReinforcementZeroToAll/08_1_pg_cartpole.py",
		"/home/kkweon/github/ReinforcementZeroToAll/08_2_softmax_pg_cartpole.py",
		"/home/kkweon/github/ReinforcementZeroToAll/07_1_q_net_cartpole.py",
		"/home/kkweon/github/ReinforcementZeroToAll/08_3_softmax_pg_pacman.py",
		"/home/kkweon/github/rl-cartpole/dqn.tf.py",
		"/home/kkweon/temp/why_batchnorm_not_working/mnist.ipynb",
		"/home/kkweon/temp/why_batchnorm_not_working/mnist.py",
		"/home/kkweon/temp/why_batchnorm_not_working/mnist.",
		"/home/kkweon/temp/docstring.py",
		"/home/kkweon/github/keras-docset/readme.md",
		"/home/kkweon/github/keras-docset/preprocess.py",
		"/home/kkweon/github/keras-docset/keras.io/preprocess.py",
		"/home/kkweon/github/keras-docset/keras.io/Untitled Document",
		"/home/kkweon/Downloads/dqn_test/Pong-v0__DQN__my__02.py",
		"/home/kkweon/github/lazy-programmers/nlp_class2/tfidf_tsne.py",
		"/home/kkweon/github/lazy-programmers/rnn_class/util.py",
		"/home/kkweon/github/lazy-programmers/nlp_class2/tfidf_tsne_simple.py",
		"/home/kkweon/temp/why_batchnorm_not_working/bn_compare.ipynb",
		"/home/kkweon/github/CS294/hw1/tf_util.py",
		"/home/kkweon/github/CS294/hw1/load_policy.py",
		"/home/kkweon/github/CS294/hw1/run_behavior_cloning.py",
		"/home/kkweon/.config/sublime-text-3/Packages/AutoFileName/autofilename.sublime-settings",
		"/home/kkweon/github/carnd/Project-Traffic-Sign-Classifier/writeup_template.md",
		"/home/kkweon/temp/carnd/binary.csv",
		"/home/kkweon/temp/carnd/data_prep.py",
		"/home/kkweon/.config/sublime-text-3/Packages/Anaconda/Anaconda.sublime-settings",
		"/home/kkweon/temp/carnd/backprop.py",
		"/home/kkweon/temp/kotex.tex",
		"/home/kkweon/.config/sublime-text-3/Packages/User/LaTeXTools.sublime-settings",
		"/home/kkweon/github/aind/P3-Planning/my_planning_graph.py",
		"/home/kkweon/github/aind/P3-Planning/README.md",
		"/home/kkweon/Desktop/delme.py",
		"/home/kkweon/.config/sublime-text-3/Packages/User/python3.sublime-build"
	],
	"find":
	{
		"height": 26.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"####",
			"#",
			"4",
			"keras_version",
			"X_sample",
			"X_batch",
			"img_augment",
			"read",
			"imread",
			" + ",
			"(",
			"threadsafe_iter",
			"COnv",
			"center_image_list",
			", ",
			"128",
			"test_gen",
			"file_path = \"./data/driving_log.csv\"",
			"model",
			"center",
			"vgg",
			"vgg_cifar10",
			"p",
			"train",
			"rx",
			"total_batch",
			"y_true_t",
			" ",
			"    ",
			"   ",
			"  ",
			"CV",
			"    ",
			" ",
			" seconds\n",
			" states time ",
			" with ",
			"Training complete for ",
			"words",
			"build_fit_model",
			"file1",
			"0, ",
			"ignored",
			"# x = Activation(\"relu\")(x)",
			"\n        ",
			"ResNet50",
			"labels",
			"validation_monitors",
			"evaluate",
			"OUTPUT_SIZE",
			"env",
			"outpu",
			"input=",
			"input",
			"resize",
			"build_graph",
			"graph_ops",
			"mnimize",
			"ACTION",
			"action_shape",
			"self.value",
			"self",
			"x",
			"512",
			"256",
			"128",
			"64",
			", [",
			"np.reshape(",
			"train_X",
			"y",
			"X",
			"resnet",
			"ResNet",
			"vggnet",
			"=4",
			"[256, 256, 1024]",
			"=3",
			"[128, 128, 512]",
			"=2",
			"64, 64, 256",
			"activatoin",
			"activation='relu'",
			"256",
			"512",
			"net",
			"resnet",
			"_value_loss",
			"reshape",
			"4, 80, 80",
			"ste_n_times",
			"step_4times",
			"I",
			"input_dim",
			"6400",
			"128",
			"32",
			"128",
			"32",
			"512",
			"12",
			"self.softmax",
			"self",
			"softmax",
			"submission",
			"competition",
			"destination",
			"dqn",
			"make_params",
			"theta_sd",
			"mean",
			"sd",
			"mean",
			"parameters",
			"parser",
			"y_stack",
			"x_stack",
			"output_size",
			"input_size",
			"dis",
			"max_episodes",
			"batch_size",
			"ㅂㅆ",
			"obs",
			"temp_batch",
			"train_batch",
			"32",
			"'''"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"incremental_find":
	{
		"height": 34.0
	},
	"input":
	{
		"height": 34.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.467086834734,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 278.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.latextools":
	{
		"height": 211.0
	},
	"pinned_build_system": "Packages/User/Python3.sublime-build",
	"replace":
	{
		"height": 48.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"model.",
				"model.py"
			],
			[
				"drive",
				"drive.py"
			],
			[
				"train.py",
				"train.py"
			],
			[
				"writeup.md",
				"writeup.md"
			],
			[
				"dri",
				"drive.py"
			],
			[
				"test",
				"tests/test_train.py"
			],
			[
				"data/",
				"data/driving_log.csv"
			],
			[
				"train_feature",
				"train_feature_extraction.py"
			],
			[
				"feature",
				"feature_extraction.py"
			],
			[
				"ads",
				"asl_data.py"
			],
			[
				"myrc",
				"my_recognizer.py"
			],
			[
				"styl",
				"style.scss"
			],
			[
				"model.py",
				"model.py"
			],
			[
				"10_1act",
				"10_1_Actor_Critic.ipynb"
			],
			[
				"10_1",
				"10_1_A2C.py"
			],
			[
				"dqn.py",
				"dqn.py"
			],
			[
				"dqn",
				"dqn.py"
			],
			[
				".trav",
				".travis.yml"
			],
			[
				"07_2",
				"07_2_dqn_2013_cartpole.py"
			],
			[
				"pong",
				"Pong-v0__DQN__my__02.py"
			],
			[
				"tfidf_t",
				"tfidf_tsne.py"
			],
			[
				"run_",
				"run_expert.py"
			],
			[
				"write",
				"writeup_template.md"
			],
			[
				"read",
				"README.md"
			],
			[
				"my_plann",
				"my_planning_graph.py"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 427.0,
	"status_bar_visible": true,
	"template_settings":
	{
		"max_columns": 2
	}
}
